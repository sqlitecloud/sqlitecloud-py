{
  "errors": [],
  "generated_at": "2024-08-26T09:15:36Z",
  "metrics": {
    "_totals": {
      "CONFIDENCE.HIGH": 17.0,
      "CONFIDENCE.LOW": 4.0,
      "CONFIDENCE.MEDIUM": 12.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 18.0,
      "SEVERITY.MEDIUM": 15.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 5145,
      "nosec": 0
    },
    "src/setup.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 29,
      "nosec": 0
    },
    "src/sqlitecloud/__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 25,
      "nosec": 0
    },
    "src/sqlitecloud/client.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 103,
      "nosec": 0
    },
    "src/sqlitecloud/datatypes.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 1.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 173,
      "nosec": 0
    },
    "src/sqlitecloud/dbapi2.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 750,
      "nosec": 0
    },
    "src/sqlitecloud/download.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 32,
      "nosec": 0
    },
    "src/sqlitecloud/driver.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 834,
      "nosec": 0
    },
    "src/sqlitecloud/exceptions.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 142,
      "nosec": 0
    },
    "src/sqlitecloud/pubsub.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 56,
      "nosec": 0
    },
    "src/sqlitecloud/resultset.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 111,
      "nosec": 0
    },
    "src/sqlitecloud/upload.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 51,
      "nosec": 0
    },
    "src/tests/__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 0,
      "nosec": 0
    },
    "src/tests/conftest.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 76,
      "nosec": 0
    },
    "src/tests/integration/__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 0,
      "nosec": 0
    },
    "src/tests/integration/test_client.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 1.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 552,
      "nosec": 0
    },
    "src/tests/integration/test_dbapi2.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 319,
      "nosec": 0
    },
    "src/tests/integration/test_download.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 20,
      "nosec": 0
    },
    "src/tests/integration/test_driver.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 86,
      "nosec": 0
    },
    "src/tests/integration/test_pandas.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 51,
      "nosec": 0
    },
    "src/tests/integration/test_pubsub.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 1.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 128,
      "nosec": 0
    },
    "src/tests/integration/test_sqlalchemy.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 55,
      "nosec": 0
    },
    "src/tests/integration/test_sqlite_parity.py": {
      "CONFIDENCE.HIGH": 12.0,
      "CONFIDENCE.LOW": 1.0,
      "CONFIDENCE.MEDIUM": 11.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 12.0,
      "SEVERITY.MEDIUM": 12.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 1011,
      "nosec": 0
    },
    "src/tests/integration/test_upload.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 1.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 20,
      "nosec": 0
    },
    "src/tests/unit/test_client.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 48,
      "nosec": 0
    },
    "src/tests/unit/test_dbapi2.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 226,
      "nosec": 0
    },
    "src/tests/unit/test_driver.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 134,
      "nosec": 0
    },
    "src/tests/unit/test_resultset.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 99,
      "nosec": 0
    },
    "src/tests/unit/test_types.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 14,
      "nosec": 0
    }
  },
  "results": [
    {
      "code": "93 class SQLiteCloudAccount:\n94     def __init__(\n95         self,\n96         username: Optional[str] = \"\",\n97         password: Optional[str] = \"\",\n98         hostname: str = \"\",\n99         dbname: Optional[str] = \"\",\n100         port: int = SQLITECLOUD_DEFAULT.PORT.value,\n101         apikey: Optional[str] = \"\",\n102     ) -> None:\n103         # User name is required unless connectionstring is provided\n104         self.username = username\n105         # Password is required unless connection string is provided\n106         self.password = password\n107         # Password is hashed\n108         self.password_hashed = False\n109         # API key instead of username and password\n110         self.apikey = apikey\n111         # Name of database to open\n112         self.dbname = dbname\n113         # Like mynode.sqlitecloud.io\n114         self.hostname = hostname\n115         self.port = port\n116 \n",
      "col_offset": 4,
      "filename": "src/sqlitecloud/datatypes.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: ''",
      "line_number": 94,
      "line_range": [
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b107_hardcoded_password_default.html",
      "test_id": "B107",
      "test_name": "hardcoded_password_default"
    },
    {
      "code": "648 \n649         table_name = \"TestCompress\" + str(random.randint(0, 99999))\n650         try:\n",
      "col_offset": 42,
      "filename": "src/tests/integration/test_client.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 649,
      "line_range": [
        649
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "664             rowset = client.exec_query(\n665                 f\"SELECT * from {table_name}\",\n666                 connection,\n",
      "col_offset": 16,
      "filename": "src/tests/integration/test_client.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 665,
      "line_range": [
        665
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "50 \n51         name = \"MyGenre\" + str(random.randint(0, 1000))\n52         query = \"INSERT INTO genres (Name) VALUES (?)\"\n",
      "col_offset": 31,
      "filename": "src/tests/integration/test_driver.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 51,
      "line_range": [
        51
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "73 \n74         name = \"MyGenre\" + str(random.randint(0, 1000))\n75         result_insert = driver.execute_statement(\n",
      "col_offset": 31,
      "filename": "src/tests/integration/test_driver.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 74,
      "line_range": [
        74
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "95 \n96         name = \"MyGenre\" + str(random.randint(0, 1000))\n97         result_insert = driver.execute_statement(\n",
      "col_offset": 31,
      "filename": "src/tests/integration/test_driver.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 96,
      "line_range": [
        96
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "100 \n101         new_name = \"AnotherMyGenre\" + str(random.randint(0, 1000))\n102         result = driver.execute_statement(\n",
      "col_offset": 42,
      "filename": "src/tests/integration/test_driver.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 101,
      "line_range": [
        101
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "177         client.exec_query(\n178             f\"UPDATE genres SET Name = '{new_name}' WHERE GenreId = 1;\", connection\n179         )\n",
      "col_offset": 12,
      "filename": "src/tests/integration/test_pubsub.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 178,
      "line_range": [
        178
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "54 \n55         table = \"sqlitetest\" + str(random.randint(0, 99999))\n56         try:\n",
      "col_offset": 35,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 55,
      "line_range": [
        55
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "63 \n64             select_query = f\"SELECT * FROM {table}\"\n65             cursor = connection.execute(select_query)\n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 64,
      "line_range": [
        64
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "619 \n620         tableName = \"TestTextFactory\" + str(random.randint(0, 99999))\n621         try:\n",
      "col_offset": 44,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 620,
      "line_range": [
        620
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "624             cursor.execute(f\"INSERT INTO {tableName}(p) VALUES (?)\", (15,))\n625             cursor.execute(f\"SELECT p FROM {tableName}\")\n626 \n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 625,
      "line_range": [
        625
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "648 \n649         tableName = \"TestTextFactory\" + str(random.randint(0, 99999))\n650         try:\n",
      "col_offset": 44,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 649,
      "line_range": [
        649
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "653             cursor.execute(f\"INSERT INTO {tableName}(p) VALUES (?)\", (\"15\",))\n654             cursor.execute(f\"SELECT p FROM {tableName}\")\n655 \n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 654,
      "line_range": [
        654
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "710 \n711         tableName = \"TestParseDeclTypes\" + str(random.randint(0, 99999))\n712         try:\n",
      "col_offset": 47,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 711,
      "line_range": [
        711
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "715             cursor.executemany(f\"INSERT INTO {tableName}(p) VALUES (?)\", [(p1,), (p2,)])\n716             cursor.execute(f\"SELECT p FROM {tableName}\")\n717 \n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 716,
      "line_range": [
        716
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "899 \n900         tableName = \"TestParseDeclTypes\" + str(random.randint(0, 99999))\n901         try:\n",
      "col_offset": 47,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 900,
      "line_range": [
        900
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "904             cursor.execute(f\"INSERT INTO {tableName}(p) VALUES (?)\", (str(p),))\n905             cursor.execute(f\"SELECT p FROM {tableName}\")\n906 \n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 905,
      "line_range": [
        905
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "924 \n925         tableName = \"TestParseDeclTypes\" + str(random.randint(0, 99999))\n926         try:\n",
      "col_offset": 47,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 925,
      "line_range": [
        925
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "929             cursor.execute(f\"INSERT INTO {tableName}(p) VALUES (?)\", (\"1.0,2.0\",))\n930             cursor.execute(f\"SELECT p FROM {tableName}\")\n931 \n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 930,
      "line_range": [
        930
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "952 \n953         tableName = \"TestParseDeclTypes\" + str(random.randint(0, 99999))\n954         try:\n",
      "col_offset": 47,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 953,
      "line_range": [
        953
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "957             cursor.execute(f\"INSERT INTO {tableName}(p) VALUES (?)\", (mynumber,))\n958             cursor.execute(f\"SELECT p FROM {tableName}\")\n959 \n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 958,
      "line_range": [
        958
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "985 \n986         tableName = \"TestParseDeclTypes\" + str(random.randint(0, 99999))\n987         try:\n",
      "col_offset": 47,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 986,
      "line_range": [
        986
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "990             cursor.execute(f\"INSERT INTO {tableName}(p) VALUES (?)\", (pippo,))\n991             cursor.execute(f\"SELECT p FROM {tableName}\")\n992 \n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 991,
      "line_range": [
        991
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1014 \n1015         tableName = \"TestParseDeclTypes\" + str(random.randint(0, 99999))\n1016         try:\n",
      "col_offset": 47,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 1015,
      "line_range": [
        1015
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "1019             cursor.execute(f\"INSERT INTO {tableName}(p) VALUES (?)\", (mynumber,))\n1020             cursor.execute(f\"SELECT p FROM {tableName}\")\n1021 \n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1020,
      "line_range": [
        1020
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1041 \n1042         tableName = \"TestParseDeclTypes\" + str(random.randint(0, 99999))\n1043         try:\n",
      "col_offset": 47,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 1042,
      "line_range": [
        1042
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "1054             )\n1055             cursor.execute(f\"SELECT d, t FROM {tableName}\")\n1056 \n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1055,
      "line_range": [
        1055
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1093 \n1094         tableName = \"TestParseDeclTypes\" + str(random.randint(0, 99999))\n1095         try:\n",
      "col_offset": 47,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 1094,
      "line_range": [
        1094
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "1099             cursor.execute(f\"INSERT INTO {tableName}(p) VALUES (?)\", (p,))\n1100             cursor.execute(f\"SELECT p FROM {tableName}\")\n1101 \n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1100,
      "line_range": [
        1100
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1179 \n1180         tableName = \"TestParseColnames\" + str(random.randint(0, 99999))\n1181         try:\n",
      "col_offset": 46,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 1180,
      "line_range": [
        1180
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "1185             cursor.execute(f\"INSERT INTO {tableName}(p) VALUES (?)\", (str(p),))\n1186             cursor.execute(f'SELECT p, p \"lat lng [coordinate]\" FROM {tableName}')\n1187 \n",
      "col_offset": 27,
      "filename": "src/tests/integration/test_sqlite_parity.py",
      "issue_confidence": "MEDIUM",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1186,
      "line_range": [
        1186
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "18             rowset = client.exec_query(\n19                 f\"USE DATABASE {dbname}; SELECT * FROM contacts\", connection\n20             )\n",
      "col_offset": 16,
      "filename": "src/tests/integration/test_upload.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 19,
      "line_range": [
        19
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    }
  ]
}
